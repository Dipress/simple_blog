// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package reg is a generated GoMock package.
package reg

import (
	context "context"
	jwt_go "github.com/dgrijalva/jwt-go"
	user "github.com/dipress/blog/internal/user"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValidater is a mock of Validater interface
type MockValidater struct {
	ctrl     *gomock.Controller
	recorder *MockValidaterMockRecorder
}

// MockValidaterMockRecorder is the mock recorder for MockValidater
type MockValidaterMockRecorder struct {
	mock *MockValidater
}

// NewMockValidater creates a new mock instance
func NewMockValidater(ctrl *gomock.Controller) *MockValidater {
	mock := &MockValidater{ctrl: ctrl}
	mock.recorder = &MockValidaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidater) EXPECT() *MockValidaterMockRecorder {
	return m.recorder
}

// ValidateUser mocks base method
func (m *MockValidater) ValidateUser(arg0 context.Context, arg1 *Form) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUser indicates an expected call of ValidateUser
func (mr *MockValidaterMockRecorder) ValidateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockValidater)(nil).ValidateUser), arg0, arg1)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockRepository) CreateUser(ctx context.Context, f *user.NewUser, usr *user.User) (func() error, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, f, usr)
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, f, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, f, usr)
}

// UniqueUsername mocks base method
func (m *MockRepository) UniqueUsername(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueUsername", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// UniqueUsername indicates an expected call of UniqueUsername
func (mr *MockRepositoryMockRecorder) UniqueUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueUsername", reflect.TypeOf((*MockRepository)(nil).UniqueUsername), ctx, username)
}

// UniqueEmail mocks base method
func (m *MockRepository) UniqueEmail(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueEmail", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UniqueEmail indicates an expected call of UniqueEmail
func (mr *MockRepositoryMockRecorder) UniqueEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueEmail", reflect.TypeOf((*MockRepository)(nil).UniqueEmail), ctx, email)
}

// MockTokenGenerator is a mock of TokenGenerator interface
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method
func (m *MockTokenGenerator) GenerateToken(ctx context.Context, claims jwt_go.Claims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken
func (mr *MockTokenGeneratorMockRecorder) GenerateToken(ctx, claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateToken), ctx, claims)
}
